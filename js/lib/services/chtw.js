// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['config', 'lib/services/service-provider', 'models/user'], function(Config, ServiceProvider, User) {
  'use strict';
  var Chtw;
  return Chtw = (function(_super) {
    __extends(Chtw, _super);

    Chtw.prototype.baseUrl = config.api.root;

    function Chtw() {
      this.loginStatusHandler = __bind(this.loginStatusHandler, this);
      this.loginHandler = __bind(this.loginHandler, this);
      this.setToken = __bind(this.setToken, this);
      var authCallback;
      Chtw.__super__.constructor.apply(this, arguments);
      this.accessToken = localStorage.getItem('accessToken');
      authCallback = _.bind(this.loginHandler, this, this.loginHandler);
      this.suscribeEvent('auth:setToken', this.setToken);
      this.suscribeEvent('auth:callback:ostio', authCallback);
    }

    Chtw.prototype.setToken = function(token) {
      console.log('Ostio#setToken', token);
      if (token != null) {
        localStorage.setItem('accessToken', token);
      } else {
        localStorage.clear();
      }
      return this.accessToken = token;
    };

    Chtw.prototype.load = function() {
      this.resolve();
      return this;
    };

    Chtw.prototype.isLoaded = function() {
      return true;
    };

    Chtw.prototype.ajax = function(type, url, data) {
      console.log('ajax', url, this.accessToken, this);
      url = this.baseUrl + url;
      if (this.accessToken) {
        url += "?access_token=" + this.accessToken;
      }
      return $.ajax({
        url: url,
        data: data,
        type: type,
        dataType: 'json'
      });
    };

    Chtw.prototype.triggerLogin = function(loginContext) {
      var callback;
      callback = _.bind(this.loginHandler, this, this.loginHandler);
      return window.location = URL;
    };

    Chtw.prototype.loginHandler = function(loginContext, response) {
      if (response) {
        this.setToken(response.accessToken);
        this.publishEvent('loginSuccessful', {
          provider: this,
          loginContext: loginContext
        });
        return this.getUserData().done(this.processUserData);
      } else {
        return this.publishEvent('loginFail', {
          provider: this,
          loginContext: loginContext
        });
      }
    };

    Chtw.prototype.getUserData = function() {
      return this.ajax('get', '/v1/users/me');
    };

    Chtw.prototype.processUserData = function(response) {
      return this.publishEvent('userData', response);
    };

    Chtw.prototype.getLoginStatus = function(callback, force) {
      if (callback == null) {
        callback = this.loginStatusHandler;
      }
      if (force == null) {
        force = false;
      }
      return this.getUserData().always(callback);
    };

    Chtw.prototype.loginStatusHandler = function(response, status) {
      var parsed;
      if (!response || status === 'error') {
        return this.publishEvent('logout');
      } else {
        parsed = User.prototype.parse.call(null, response);
        return this.publishEvent('serviceProviderSession', _.extend(parsed, {
          provider: this,
          userId: response.id,
          accessToken: this.accessToken
        }));
      }
    };

    return Chtw;

  })(ServiceProvider);
});
